# задача 1
# Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются
# в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во
# элементов второго множества. Затем пользователь вводит сами элементы
# множеств.

myList1 = list(input("Введите значения для списка № 1 через пробел: ").split())
myList2 = list(input("Введите значения для списка № 2 через пробел: ").split())
result = []
for item in myList2:
    if item in myList1:
        result.append(item)
print(result)
newSet = list(set(result))
newSet.sort()
print(newSet)

# спи**еный вариант решения.
# разобрать работу метода 'map(), да и вообще разобрать решение
# помоему не работает т.к. не производит сортировку >
list_1 = list(map(int, input("Введите 1ый список через пробел\n").split()))
list_2 = list(map(int, input("Введите 2ой список через пробел\n").split()))
dif = {i for i in list_2 if i in list_1}
print(*dif)

# Задача 2
# В фермерском хозяйстве в Карелии выращивают чернику. Она растет на круглой
# грядке, причем кусты высажены только по окружности. Таким образом, у каждого
# куста есть ровно два соседних. Всего на грядке растет N кустов.
# Семинар 4 2
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них
# выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым
# кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может
# собрать за один заход собирающий модуль, находясь перед некоторым кустом
# заданной во входном файле грядки.
# Короче, надо найти самые плодородные 3 куста рядом. 

berries = list(map(int, input("Введите количество ягод на кустах через пробел\n").split()))
if len(berries) < 4:
    print(sum(berries))
else:
    res = 0
    for i in range(len(berries)):   # 6
        summ = berries[i-1] + berries[i] + berries[(i+1) % len(berries)]
        print(summ)
        if summ > res: 
            res = summ
            ind = (i-1, i, (i+1) % len(berries))
    print(f"{berries[ind[0]]} + {berries[ind[1]]} + {berries[ind[2]]} = {res}")

